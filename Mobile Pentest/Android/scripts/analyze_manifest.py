#!/usr/bin/env python3

import xml.etree.ElementTree as ET
import sys
import os
from termcolor import colored

# List of dangerous permissions to flag
dangerous_permissions = {
    "android.permission.READ_SMS",
    "android.permission.SEND_SMS",
    "android.permission.RECEIVE_SMS",
    "android.permission.READ_CONTACTS",
    "android.permission.WRITE_CONTACTS",
    "android.permission.CAMERA",
    "android.permission.RECORD_AUDIO",
    "android.permission.READ_EXTERNAL_STORAGE",
    "android.permission.WRITE_EXTERNAL_STORAGE",
    "android.permission.ACCESS_FINE_LOCATION",
    "android.permission.ACCESS_COARSE_LOCATION"
}

def analyze_manifest(path):
    if not os.path.isfile(path):
        print(colored("[!] File not found:", "red"), path)
        return

    try:
        tree = ET.parse(path)
        root = tree.getroot()
        ns = {'android': 'http://schemas.android.com/apk/res/android'}

        # Extract application name
        app = root.find("application")
        app_label = app.get("{http://schemas.android.com/apk/res/android}label", "Unknown App")
        
        print(colored("üì± App Name: ", "cyan") + colored(f"{app_label}", "white", attrs=["bold"]))
        print(colored(f"üîç Analyzing: {path}\n", "cyan", attrs=["bold"]))

        # 1. android:debuggable
        if app.get("{http://schemas.android.com/apk/res/android}debuggable") == "true":
            print(colored("[!] android:debuggable is set to true", "red"))

        # 2. usesCleartextTraffic
        if app.get("{http://schemas.android.com/apk/res/android}usesCleartextTraffic") == "true":
            print(colored("[!] usesCleartextTraffic is true (allows HTTP traffic)", "red"))

        # 3. android:allowBackup
        if app.get("{http://schemas.android.com/apk/res/android}allowBackup") == "true":
            print(colored("[!] allowBackup is enabled (data can be backed up)", "yellow"))

        # 4. Exported components
        for tag in ["activity", "activity-alias", "service", "receiver", "provider"]:
            for item in app.findall(tag):
                exported = item.get("{http://schemas.android.com/apk/res/android}exported")
                name = item.get("{http://schemas.android.com/apk/res/android}name")
                if exported == "true":
                    print(colored(f"[!] Exported component ({tag}): {name}", "red"))

        # 5. Dangerous permissions
        for perm in root.findall("uses-permission"):
            name = perm.get("{http://schemas.android.com/apk/res/android}name")
            if name in dangerous_permissions:
                print(colored(f"[!] Dangerous permission requested: {name}", "yellow"))

        # 6. Custom permissions missing protectionLevel
        for perm in root.findall("permission"):
            level = perm.get("{http://schemas.android.com/apk/res/android}protectionLevel")
            name = perm.get("{http://schemas.android.com/apk/res/android}name")
            if not level:
                print(colored(f"[!] Custom permission {name} missing protectionLevel", "yellow"))

        print(colored("\n‚úÖ Analysis complete.\n", "green"))

    except ET.ParseError as e:
        print(colored("[!] Failed to parse AndroidManifest.xml:", "red"), e)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 analyze_manifest.py <AndroidManifest.xml>")
        sys.exit(1)
    analyze_manifest(sys.argv[1])
