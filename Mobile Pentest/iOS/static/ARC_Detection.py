import os
import subprocess
import sys
from pathlib import Path

# ANSI color codes
RED = "\033[91m"
GREEN = "\033[92m"
CYAN = "\033[96m"
BOLD = "\033[1m"
RESET = "\033[0m"

manual_objc_symbols = [
    "retain",
    "release",
    "autorelease",
    "dealloc",
    "objc_retain",
    "objc_release",
    "objc_autorelease",
    "objc_storeStrong"
]

def check_symbols(binary_path):
    print(f"{CYAN}{BOLD}Analyzing binary: {binary_path}{RESET}")
    
    if not Path(binary_path).is_file():
        print(f"{RED}Error: File not found!{RESET}")
        return

    try:
        output = subprocess.check_output(["strings", binary_path], text=True)
    except Exception as e:
        print(f"{RED}Error running strings: {e}{RESET}")
        return

    found = []
    for symbol in manual_objc_symbols:
        if symbol in output:
            found.append(symbol)

    if found:
        print(f"\n{RED}{BOLD}[!] ARC is likely NOT enabled{RESET}")
        print(f"{CYAN}Manual memory management symbols detected:{RESET}")
        for s in found:
            print(f"  ðŸ”´ {s}")
        print(f"\n{BOLD}Recommendation:{RESET} Enable ARC using `-fobjc-arc` during compilation.")
    else:
        print(f"{GREEN}[âœ“] No manual memory management symbols detected.{RESET}")
        print(f"{GREEN}ARC may be enabled in this binary.{RESET}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: python3 detect_arc.py <path_to_binary_or_extracted_ipa_binary>")
        sys.exit(1)

    check_symbols(sys.argv[1])
